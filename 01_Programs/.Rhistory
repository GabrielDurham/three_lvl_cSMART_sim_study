tab_data <- NULL
for (setting in rownames(hc_table_sets)) {
tab_data[[setting]] <-
es_tables[[setting]][es_tables[[setting]]$Description==es, ]
}
for (col in cols_to_show_es_hc) {for (setting in rownames(hc_table_sets)) {
suff <- hc_table_sets[setting, "suff"]
new_row[[paste0(col, suff)]] <- tab_data[[setting]][[col]]
}}
es_table_hc <- rbind(es_table_hc, new_row)
}
es_table_hc_cap <-
Create_Caption(table=es_table_hc,
caption="Static vs Longitudinal Power Comparison - High Correlation",
label="tab:Power_Comp")
print(xtable(x=es_table_hc), include.rownames=FALSE,
add.to.row=es_table_hc_cap, sanitize.text.function=function(x){x})
n_list_es_hc <- c(661, 106, 42, 27)
delta_list_hc <- c(0.2, 0.5, 0.8, 1)
es_hc_label_df <- data.frame(n=n_list_es_hc, delta=delta_list_hc)
hc_table_sets <- data.frame(fit=c("fit_1", "fit_2", "alt_fit_1"),
suff=c(".long", ".long.ind", ".static"))
es_tables <- NULL
es_tables_fits <- NULL
for (setting in rownames(hc_table_sets)) {
fit <- hc_table_sets[setting, "fit"]
es_tables_fits[[setting]] <- NULL
for (row in rownames(es_hc_label_df)) {
delta <- es_hc_label_df[row, "delta"]
n <- es_hc_label_df[row, "n"]
description <- paste0("$\\delta=", delta, "$ ($n=", n, "$)")
sim_label <- paste0("sim_ASIC-Eff-Size-yTot-n:2-ES:", format(delta, nsmall=1))
if (substr(fit, 1, 3)=="fit") {
es_tables_fits[[setting]][[description]] <-
list(fit_data=es_inference_output[[sim_label]][[fit]][["EOS"]],
filter_statement=comp_filter)
} else {
es_tables_fits[[setting]][[description]] <-
list(fit_data=es_inference_output[[sim_label]][[fit]],
filter_statement=comp_filter)
}
}
temp_table <- Summarize_Multiple_Fits(fit_list=es_tables_fits[[setting]])
es_tables[[setting]] <- Round_and_Format_DF(df=temp_table, n_digits=3)
}
es_table_hc <- data.frame()
#cols_to_show_es_hc <- c("Relative_Bias", "RMSE", "Coverage", "Power")
cols_to_show_es_hc <- c("RMSE", "Coverage", "Power")
for (es in unique(es_tables[[1]]$Description)) {
new_row <- data.frame("Effect Size (n)"=es)
tab_data <- NULL
for (setting in rownames(hc_table_sets)) {
tab_data[[setting]] <-
es_tables[[setting]][es_tables[[setting]]$Description==es, ]
}
for (col in cols_to_show_es_hc) {for (setting in rownames(hc_table_sets)) {
suff <- hc_table_sets[setting, "suff"]
new_row[[paste0(col, suff)]] <- tab_data[[setting]][[col]]
}}
es_table_hc <- rbind(es_table_hc, new_row)
}
es_table_hc_cap <-
Create_Caption(table=es_table_hc,
caption="Static vs Longitudinal Power Comparison - High Correlation",
label="tab:Power_Comp")
print(xtable(x=es_table_hc), include.rownames=FALSE,
add.to.row=es_table_hc_cap, sanitize.text.function=function(x){x})
n_list_es_hc <- c(661, 106, 42, 27)
delta_list_hc <- c(0.2, 0.5, 0.8, 1)
es_hc_label_df <- data.frame(n=n_list_es_hc, delta=delta_list_hc)
hc_table_sets <- data.frame(fit=c("fit_1", "fit_2", "alt_fit_1"),
suff=c(".long", ".long.ind", ".static"))
es_tables <- NULL
es_tables_fits <- NULL
for (setting in rownames(hc_table_sets)) {
fit <- hc_table_sets[setting, "fit"]
es_tables_fits[[setting]] <- NULL
for (row in rownames(es_hc_label_df)) {
delta <- es_hc_label_df[row, "delta"]
n <- es_hc_label_df[row, "n"]
description <- paste0("$\\delta=", delta, "$ ($n=", n, "$)")
sim_label <- paste0("sim_ASIC-Eff-Size-yTot-n:2-ES:", format(delta, nsmall=1))
if (substr(fit, 1, 3)=="fit") {
es_tables_fits[[setting]][[description]] <-
list(fit_data=es_inference_output[[sim_label]][[fit]][["EOS"]],
filter_statement=comp_filter)
} else {
es_tables_fits[[setting]][[description]] <-
list(fit_data=es_inference_output[[sim_label]][[fit]],
filter_statement=comp_filter)
}
}
temp_table <- Summarize_Multiple_Fits(fit_list=es_tables_fits[[setting]])
es_tables[[setting]] <- Round_and_Format_DF(df=temp_table, n_digits=10)
}
es_table_hc <- data.frame()
#cols_to_show_es_hc <- c("Relative_Bias", "RMSE", "Coverage", "Power")
cols_to_show_es_hc <- c("RMSE", "Coverage", "Power")
for (es in unique(es_tables[[1]]$Description)) {
new_row <- data.frame("Effect Size (n)"=es)
tab_data <- NULL
for (setting in rownames(hc_table_sets)) {
tab_data[[setting]] <-
es_tables[[setting]][es_tables[[setting]]$Description==es, ]
}
for (col in cols_to_show_es_hc) {for (setting in rownames(hc_table_sets)) {
suff <- hc_table_sets[setting, "suff"]
new_row[[paste0(col, suff)]] <- tab_data[[setting]][[col]]
}}
es_table_hc <- rbind(es_table_hc, new_row)
}
es_table_hc_cap <-
Create_Caption(table=es_table_hc,
caption="Static vs Longitudinal Power Comparison - High Correlation",
label="tab:Power_Comp")
print(xtable(x=es_table_hc), include.rownames=FALSE,
add.to.row=es_table_hc_cap, sanitize.text.function=function(x){x})
es_table_hc$RMSE.long.ind-es_table_hc$RMSE.static
View(es_table_hc_cap)
View(es_tables)
View(es_tables_fits)
View(es_tables)
es_tables[["2"]]
es_tables[["3"]]
View(es_tables_fits)
es_tables_fits[[3]][[1]]$fit_data[1,]
es_tables_fits[[3\2]][[1]]$fit_data[1,]
es_tables_fits[[2]][[1]]$fit_data[1,]
es_tables_fits[[3]][[1]]$fit_data[1,]
# Load in packages and file paths
source(file="Preamble.R")
# Pull in functions for general data maintenance
source(file=paste0(helper_funcs_path, "General_Data_Maintenance.R"))
# Pull in functions for pre-response MC simulations
source(file=paste0(helper_funcs_path, "Pre_R_Cond_Param_Sim.R"))
# Pull in functions for collecting all simulation parameters
source(file=paste0(helper_funcs_path, "Derive_Sim_Parameters.R"))
# Pull in functions for data simulation
source(file=paste0(helper_funcs_path, "Simulate_SMART_Data.R"))
# Pull in functions for model fitting
source(file=paste0(helper_funcs_path, "Simulate_and_Fit_Data.R"))
# Pull in functions for inference
source(file=paste0(helper_funcs_path, "Conduct_Inference.R"))
# Pull in table creation functions
source(file=paste0(helper_funcs_path, "Create_Tables.R"))
# Pull in model fitting function
source(file=paste0(model_fit_func_path, "function_v3.5_1.R"))
comp_filter <- "dtr_1==\"d_1_1\" & dtr_2==\"d_m1_m1\""
base_run <- "run_20250308"
base_inference_output <- readRDS(file=paste0(analysis_path, base_run))
#es_run_hc <- "run_20250226a"
es_run_hc <- "run_20250723"
es_run_lc <- "run_20250227"
es_inference_output <- c(readRDS(file=paste0(analysis_path, es_run_hc)),
readRDS(file=paste0(analysis_path, es_run_lc)))
# Sample sizes 20, 30, 40, and 50
wv_misspec_run_un_1 <- c("run_20250302a")
# Sample sizes 75, 100, 150
wv_misspec_run_un_2 <- c("run_20250303")
# Sample sizes 20, 30, 40, 50, and 75
wv_misspec_run_in_1 <- c("run_20250306a")
# Sample sizes 100, 150
wv_misspec_run_in_2 <- c("run_20250307")
wvm_inference_output_raw <-
c(readRDS(file=paste0(analysis_path, wv_misspec_run_un_1)),
readRDS(file=paste0(analysis_path, wv_misspec_run_un_2)),
readRDS(file=paste0(analysis_path, wv_misspec_run_in_1)),
readRDS(file=paste0(analysis_path, wv_misspec_run_in_2)))
base_table_fits <- list(
"N=20"=list(fit_data=base_inference_output[["sim_ASIC-Primary-20"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=30"=list(fit_data=base_inference_output[["sim_ASIC-Primary-30"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=40"=list(fit_data=base_inference_output[["sim_ASIC-Primary-40"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=50"=list(fit_data=base_inference_output[["sim_ASIC-Primary-50"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=75"=list(fit_data=base_inference_output[["sim_ASIC-Primary-75"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=100"=list(fit_data=base_inference_output[["sim_ASIC-Primary-100"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=500"=list(fit_data=base_inference_output[["sim_ASIC-Primary-500"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter)
)
n_digits_base <- 3
base_table <- Summarize_Multiple_Fits(fit_list=base_table_fits)
base_table <- Round_and_Format_DF(df=base_table, n_digits=n_digits_base)
if (n_digits_base==3) {base_table_CI <- base_table
} else {
base_table_CI <- Summarize_Multiple_Fits(fit_list=base_table_fits,
n_digit_ci=n_digits_base)
}
cols_to_show_base <- c("Description", "Relative_Bias", "RMSE", "Coverage")
base_table$Relative_Bias <-
paste0(base_table$Relative_Bias, " ", base_table_CI$relative_bias_CI)
base_table$RMSE <-
paste0(base_table$RMSE, " ", base_table_CI$RMSE_CI)
base_table$Coverage <-
paste0(base_table$Coverage, " ", base_table_CI$coverage_CI)
print(xtable(x=base_table[, cols_to_show_base]), include.rownames=FALSE)
n_list_es_hc <- c(661, 106, 42, 27)
es_table_fits <- list(
"$\\delta=0.2$ ($n=661$)"=
list(fit_data=es_inference_output[["sim_ASIC-Eff-Size-yTot-n:2-ES:0.2"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"$\\delta=0.5$ ($n=106$)"=
list(fit_data=es_inference_output[["sim_ASIC-Eff-Size-yTot-n:2-ES:0.5"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"$\\delta=0.8$ ($n=42$)"=
list(fit_data=es_inference_output[["sim_ASIC-Eff-Size-yTot-n:2-ES:0.8"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"$\\delta=1.0$ ($n=27$)"=
list(fit_data=es_inference_output[["sim_ASIC-Eff-Size-yTot-n:2-ES:1.0"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter)
)
es_table_fits_static <- list(
"$\\delta=0.2$ ($n=661$)"=
list(fit_data=es_inference_output[["sim_ASIC-Eff-Size-yTot-n:2-ES:0.2"]][["alt_fit_1"]],
filter_statement=comp_filter),
"$\\delta=0.5$ ($n=106$)"=
list(fit_data=es_inference_output[["sim_ASIC-Eff-Size-yTot-n:2-ES:0.5"]][["alt_fit_1"]],
filter_statement=comp_filter),
"$\\delta=0.8$ ($n=42$)"=
list(fit_data=es_inference_output[["sim_ASIC-Eff-Size-yTot-n:2-ES:0.8"]][["alt_fit_1"]],
filter_statement=comp_filter),
"$\\delta=1.0$ ($n=27$)"=
list(fit_data=es_inference_output[["sim_ASIC-Eff-Size-yTot-n:2-ES:1.0"]][["alt_fit_1"]],
filter_statement=comp_filter)
)
es_table_1 <- Summarize_Multiple_Fits(fit_list=es_table_fits)
es_table_1 <- Round_and_Format_DF(df=es_table_1, n_digits=2)
es_table_2 <- Summarize_Multiple_Fits(fit_list=es_table_fits_static)
es_table_2 <- Round_and_Format_DF(df=es_table_2, n_digits=2)
es_table_hc <- data.frame()
#cols_to_show_es_hc <- c("Relative_Bias", "RMSE", "Coverage", "Power")
cols_to_show_es_hc <- c("RMSE", "Coverage", "Power")
for (es in unique(es_table_1$Description)) {
new_row <- data.frame("Effect Size (n)"=es)
long_data <- es_table_1[es_table_1$Description==es, ]
static_data <- es_table_2[es_table_2$Description==es, ]
for (col in cols_to_show_es_hc) {
new_row[[paste0(col,"_static")]] <- static_data[[col]]
new_row[[paste0(col,"_long")]] <- long_data[[col]]
}
es_table_hc <- rbind(es_table_hc, new_row)
}
es_table_hc_cap <-
Create_Caption(table=es_table_hc,
caption="Static vs Longitudinal Power Comparison - High Correlation",
label="tab:Power_Comp")
print(xtable(x=es_table_hc), include.rownames=FALSE,
add.to.row=es_table_hc_cap, sanitize.text.function=function(x){x})
oversat_run <- "run_20250723"
oversat_inference_output <- readRDS(file=paste0(analysis_path, oversat_run))
1+1
oversat_run <- "run_20250723"
oversat_inference_output <- readRDS(file=paste0(analysis_path, oversat_run))
n_list_oversat <- c(661, 106, 42, 27)
delta_list_oversat <- c(0.2, 0.5, 0.8, 1)
oversat_label_df <- data.frame(n=n_list_oversat, delta=delta_list_oversat)
oversat_table_sets <-
data.frame(fit=c("fit_1", "fit_2", "alt_fit_1", "alt_fit_2"),
suff=c(".long", ".long.ind", ".static", ".oversat"))
oversat_tables <- NULL
oversat_tables_fits <- NULL
for (setting in rownames(oversat_table_sets)) {
fit <- oversat_table_sets[setting, "fit"]
oversat_tables_fits[[setting]] <- NULL
for (row in rownames(oversat_label_df)) {
delta <- oversat_label_df[row, "delta"]
n <- oversat_label_df[row, "n"]
description <- paste0("$\\delta=", delta, "$ ($n=", n, "$)")
sim_label <- paste0("sim_Oversat-test-n:2-ES:", format(delta, nsmall=1))
if (substr(fit, 1, 3)=="fit") {
oversat_tables_fits[[setting]][[description]] <-
list(fit_data=oversat_inference_output[[sim_label]][[fit]][["EOS"]],
filter_statement=comp_filter)
} else {
oversat_tables_fits[[setting]][[description]] <-
list(fit_data=oversat_inference_output[[sim_label]][[fit]],
filter_statement=comp_filter)
}
}
temp_table <- Summarize_Multiple_Fits(fit_list=oversat_tables_fits[[setting]])
oversat_tables[[setting]] <- Round_and_Format_DF(df=temp_table, n_digits=2)
}
View(oversat_inference_output)
n_list_oversat <- c(661, 106, 42, 27)
delta_list_oversat <- c(0.2, 0.5, 0.8, 1)
oversat_label_df <- data.frame(n=n_list_oversat, delta=delta_list_oversat)
oversat_table_sets <-
data.frame(fit=c("fit_1", "fit_2", "alt_fit_1", "alt_fit_2"),
suff=c(".long", ".long.ind", ".static", ".oversat"))
oversat_tables <- NULL
oversat_tables_fits <- NULL
for (setting in rownames(oversat_table_sets)) {
fit <- oversat_table_sets[setting, "fit"]
oversat_tables_fits[[setting]] <- NULL
for (row in rownames(oversat_label_df)) {
delta <- oversat_label_df[row, "delta"]
n <- oversat_label_df[row, "n"]
description <- paste0("$\\delta=", delta, "$ ($n=", n, "$)")
sim_label <- paste0("sim_ASIC-Eff-Size-yTot-n:2-ES:", format(delta, nsmall=1))
if (substr(fit, 1, 3)=="fit") {
oversat_tables_fits[[setting]][[description]] <-
list(fit_data=oversat_inference_output[[sim_label]][[fit]][["EOS"]],
filter_statement=comp_filter)
} else {
oversat_tables_fits[[setting]][[description]] <-
list(fit_data=oversat_inference_output[[sim_label]][[fit]],
filter_statement=comp_filter)
}
}
temp_table <- Summarize_Multiple_Fits(fit_list=oversat_tables_fits[[setting]])
oversat_tables[[setting]] <- Round_and_Format_DF(df=temp_table, n_digits=2)
}
oversat_table <- data.frame()
#cols_to_show_oversat <- c("Relative_Bias", "RMSE", "Coverage", "Power")
cols_to_show_oversat <- c("RMSE", "Coverage", "Power")
for (es in unique(oversat_tables[[1]]$Description)) {
new_row <- data.frame("Effect Size (n)"=es)
tab_data <- NULL
for (setting in rownames(oversat_table_sets)) {
tab_data[[setting]] <-
oversat_tables[[setting]][oversat_tables[[setting]]$Description==es, ]
}
for (col in cols_to_show_oversat) {for (setting in rownames(oversat_table_sets)) {
suff <- oversat_table_sets[setting, "suff"]
new_row[[paste0(col, suff)]] <- tab_data[[setting]][[col]]
}}
oversat_table <- rbind(oversat_table, new_row)
}
oversat_table_1 <-
oversat_table[ , c(1, grep("\\.(oversat|static)$", names(oversat_table)))]
oversat_table_1 <- oversat_table_1[, c(1,3,2,5,4,7,6)]
oversat_table_1_cap <-
Create_Caption(table=oversat_table,
caption="Static vs Oversaturated Longitudinal Efficiency Comparison",
label="tab:eff_comp:oversat")
print(xtable(x=oversat_table_1), include.rownames=FALSE,
add.to.row=oversat_table_1_cap, sanitize.text.function=function(x){x})
oversat_table_2 <-
oversat_table[ , c(1, grep("\\.(long.ind|static)$", names(oversat_table)))]
oversat_table_2_cap <-
Create_Caption(table=oversat_table,
caption="Static vs Longitudinal (Independent) Efficiency Comparison",
label="tab:eff_comp:long_ind")
print(xtable(x=oversat_table_2), include.rownames=FALSE,
add.to.row=oversat_table_2_cap, sanitize.text.function=function(x){x})
oversat_table_3 <-
oversat_table[ , c(1, grep("\\.(long|oversat|static)$", names(oversat_table)))]
oversat_table_3 <- oversat_table_3[, c(1,2,4,3,5,7,6,8,10,9)]
oversat_table_3_cap <-
Create_Caption(table=oversat_table,
caption="Unified Efficiency Comparisons",
label="tab:eff_comp:unified")
print(xtable(x=oversat_table_3), include.rownames=FALSE,
add.to.row=oversat_table_3_cap, sanitize.text.function=function(x){x})
base_table_fits <- list(
"N=20"=list(fit_data=base_inference_output[["sim_ASIC-Primary-20"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=30"=list(fit_data=base_inference_output[["sim_ASIC-Primary-30"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=40"=list(fit_data=base_inference_output[["sim_ASIC-Primary-40"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=50"=list(fit_data=base_inference_output[["sim_ASIC-Primary-50"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=75"=list(fit_data=base_inference_output[["sim_ASIC-Primary-75"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=100"=list(fit_data=base_inference_output[["sim_ASIC-Primary-100"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter),
"N=500"=list(fit_data=base_inference_output[["sim_ASIC-Primary-500"]][["fit_1"]][["EOS"]],
filter_statement=comp_filter)
)
n_digits_base <- 2
base_table <- Summarize_Multiple_Fits(fit_list=base_table_fits)
base_table <- Round_and_Format_DF(df=base_table, n_digits=n_digits_base)
if (n_digits_base==3) {base_table_CI <- base_table
} else {
base_table_CI <- Summarize_Multiple_Fits(fit_list=base_table_fits,
n_digit_ci=n_digits_base)
}
cols_to_show_base <- c("Description", "Relative_Bias", "RMSE", "Coverage")
#base_table$Relative_Bias <-
#  paste0(base_table$Relative_Bias, " ", base_table_CI$relative_bias_CI)
#base_table$RMSE <-
#  paste0(base_table$RMSE, " ", base_table_CI$RMSE_CI)
#base_table$Coverage <-
#  paste0(base_table$Coverage, " ", base_table_CI$coverage_CI)
print(xtable(x=base_table[, cols_to_show_base]), include.rownames=FALSE)
# Oversaturated vs Static
oversat_table_1 <-
oversat_table[ , c(1, grep("\\.(oversat|static)$", names(oversat_table)))]
oversat_table_1 <- oversat_table_1[, c(1,3,2,5,4,7,6)]
oversat_table_1_cap <-
Create_Caption(table=oversat_table,
caption="Static vs Oversaturated Longitudinal Efficiency Comparison",
label="tab:eff_comp:oversat")
print(xtable(x=oversat_table_1), include.rownames=FALSE,
add.to.row=oversat_table_1_cap, sanitize.text.function=function(x){x})
# Old Table - Longitudinal (IND) vs Static
oversat_table_2 <-
oversat_table[ , c(1, grep("\\.(long.ind|static)$", names(oversat_table)))]
oversat_table_2_cap <-
Create_Caption(table=oversat_table,
caption="Static vs Longitudinal (Independent) Efficiency Comparison",
label="tab:eff_comp:long_ind")
print(xtable(x=oversat_table_2), include.rownames=FALSE,
add.to.row=oversat_table_2_cap, sanitize.text.function=function(x){x})
# Old Table - Longitudinal vs Longitudinal (Independent)
oversat_table_2a <-
oversat_table[ , c(1, grep("\\.(long|static)$", names(oversat_table)))]
oversat_table_2a_cap <-
Create_Caption(table=oversat_table,
caption="Longitudinal vs Longitudinal (Independent) Efficiency Comparison",
label="tab:eff_comp:long_ind")
print(xtable(x=oversat_table_2a), include.rownames=FALSE,
add.to.row=oversat_table_2a_cap, sanitize.text.function=function(x){x})
oversat_table_3 <-
oversat_table[ , c(1, grep("\\.(long|oversat|static)$", names(oversat_table)))]
oversat_table_3 <- oversat_table_3[, c(1,2,4,3,5,7,6,8,10,9)]
oversat_table_3_cap <-
Create_Caption(table=oversat_table,
caption="Unified Efficiency Comparisons",
label="tab:eff_comp:unified")
print(xtable(x=oversat_table_3), include.rownames=FALSE,
add.to.row=oversat_table_3_cap, sanitize.text.function=function(x){x})
# Oversaturated vs Static
oversat_table_1 <-
oversat_table[ , c(1, grep("\\.(oversat|static)$", names(oversat_table)))]
oversat_table_1 <- oversat_table_1[, c(1,3,2,5,4,7,6)]
oversat_table_1_cap <-
Create_Caption(table=oversat_table,
caption="Static vs Oversaturated Longitudinal Efficiency Comparison",
label="tab:eff_comp:oversat")
print(xtable(x=oversat_table_1), include.rownames=FALSE,
add.to.row=oversat_table_1_cap, sanitize.text.function=function(x){x})
# Old Table - Longitudinal (IND) vs Static
oversat_table_2 <-
oversat_table[ , c(1, grep("\\.(long.ind|static)$", names(oversat_table)))]
oversat_table_2_cap <-
Create_Caption(table=oversat_table,
caption="Static vs Longitudinal (Independent) Efficiency Comparison",
label="tab:eff_comp:long_ind")
print(xtable(x=oversat_table_2), include.rownames=FALSE,
add.to.row=oversat_table_2_cap, sanitize.text.function=function(x){x})
# Old Table - Longitudinal vs Longitudinal (Independent)
oversat_table_2a <-
oversat_table[ , c(1, grep("\\.(long|static)$", names(oversat_table)))]
oversat_table_2a_cap <-
Create_Caption(table=oversat_table,
caption="Longitudinal vs Longitudinal (Independent) Efficiency Comparison",
label="tab:eff_comp:long_ind")
print(xtable(x=oversat_table_2a), include.rownames=FALSE,
add.to.row=oversat_table_2a_cap, sanitize.text.function=function(x){x})
oversat_table_3 <-
oversat_table[ , c(1, grep("\\.(long|oversat|static)$", names(oversat_table)))]
oversat_table_3 <- oversat_table_3[, c(1,2,4,3,5,7,6,8,10,9)]
oversat_table_3_cap <-
Create_Caption(table=oversat_table,
caption="Unified Efficiency Comparisons",
label="tab:eff_comp:unified")
print(xtable(x=oversat_table_3), include.rownames=FALSE,
add.to.row=oversat_table_3_cap, sanitize.text.function=function(x){x})
# Oversaturated vs Static
oversat_table_1 <-
oversat_table[ , c(1, grep("\\.(oversat|static)$", names(oversat_table)))]
oversat_table_1 <- oversat_table_1[, c(1,3,2,5,4,7,6)]
oversat_table_1_cap <-
Create_Caption(table=oversat_table,
caption="Static vs Oversaturated Longitudinal Efficiency Comparison",
label="tab:eff_comp:oversat")
print(xtable(x=oversat_table_1), include.rownames=FALSE,
add.to.row=oversat_table_1_cap, sanitize.text.function=function(x){x})
# Old Table - Longitudinal (IND) vs Static
oversat_table_2 <-
oversat_table[ , c(1, grep("\\.(long.ind|static)$", names(oversat_table)))]
oversat_table_2_cap <-
Create_Caption(table=oversat_table,
caption="Static vs Longitudinal (Independent) Efficiency Comparison",
label="tab:eff_comp:long_ind")
print(xtable(x=oversat_table_2), include.rownames=FALSE,
add.to.row=oversat_table_2_cap, sanitize.text.function=function(x){x})
# Old Table - Longitudinal vs Longitudinal (Independent)
oversat_table_2a <-
oversat_table[ , c(1, grep("\\.(long|static)$", names(oversat_table)))]
oversat_table_2a_cap <-
Create_Caption(table=oversat_table,
caption="Longitudinal vs Longitudinal (Independent) Efficiency Comparison",
label="tab:eff_comp:long_ind")
print(xtable(x=oversat_table_2a), include.rownames=FALSE,
add.to.row=oversat_table_2a_cap, sanitize.text.function=function(x){x})
# Unified
oversat_table_3 <-
oversat_table[ , c(1, grep("\\.(long|oversat|static)$", names(oversat_table)))]
oversat_table_3 <- oversat_table_3[, c(1,2,4,3,5,7,6,8,10,9)]
oversat_table_3_cap <-
Create_Caption(table=oversat_table,
caption="Unified Efficiency Comparisons",
label="tab:eff_comp:unified")
print(xtable(x=oversat_table_3), include.rownames=FALSE,
add.to.row=oversat_table_3_cap, sanitize.text.function=function(x){x})
# Unified Table for Reviewer
oversat_table_3 <-
oversat_table[ , c(1, grep("\\.(long|oversat|static)$", names(oversat_table)))]
oversat_table_3 <- oversat_table_3[, c(1,2,4,3,5,7,6,8,10,9)]
oversat_table_3_cap <-
Create_Caption(table=oversat_table,
caption="Analysis of Oversaturated Model",
label="tab:eff_comp:unified")
print(xtable(x=oversat_table_3), include.rownames=FALSE,
add.to.row=oversat_table_3_cap, sanitize.text.function=function(x){x})
